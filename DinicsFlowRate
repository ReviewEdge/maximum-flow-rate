import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class DinicsFlowRate {
    
    // Still making it look nice
    // But it does runs correctly

    ArrayList<Integer> V;
    ArrayList<ArrayList<Edge>> E;
    ArrayList<ArrayList<Edge>> L;
    int LLength;
    ArrayList<Edge> sat;

    public DinicsFlowRate(ArrayList<Integer> V, ArrayList<ArrayList<Edge>> E){
        this.V = V;
        this.E = E;
        L = new ArrayList<>();
        LLength = 0;
        sat = new ArrayList<>();
    }

    public int maxFlowRate(int s, int t) {
        int maxFlow = 0;
        //Phase Loop
        while(true){
            System.out.println("PhaseLoop");
            if(!bfs(s,t)){
                return maxFlow;
            }
            constructLayeredGraph();
            LLength = 0;
            for (ArrayList<Edge> list : L) {
                LLength += list.size();
            }

            //Iteration Loop
            while(LLength > 0) {
                System.out.println("IterationLoop");
                System.out.println(E);
                System.out.println(L);
                Stack<Edge> stk = PathFinding(s, t);
                if(stk == null){
                    break;
                }
                System.out.println(stk);
                maxFlow += FlowChange(stk);
                System.out.println(maxFlow);

                //Cleaning Loop
                while(sat.size() > 0){
                    System.out.println("CleaningLoop");
                    removeSatEdges();
                    Queue<Edge> Qr = createPassQueue(sat);
                    Queue<Edge> Ql = createPassQueue(sat);
                    sat = new ArrayList<>();
                    rightPass(Qr);
                    leftPass(Ql);
                }
            }
        }
    }

    public void rightPass(Queue<Edge> Qr){
        while(Qr.size() > 0) {
            Edge e = Qr.poll();
            boolean foundinEdge = false;
            for(ArrayList<Edge> list: L) {
                for (int i = 0; i < list.size() && !foundinEdge; i++) {
                    if (list.get(i).end == e.end) {
                        foundinEdge = true;
                    }
                }
            }
            if(!foundinEdge) {
                for (Edge d : L.get(e.end)) {
                    Qr.offer(d);
                    sat.add(d);
                }
            }
        }
    }

    public void leftPass(Queue<Edge> Ql){
        while(Ql.size() > 0) {
            Edge e = Ql.poll();
            if(L.get(e.start).size() <= 0){
                for(ArrayList<Edge> list: L){
                    for(Edge d: list){
                        if(d.end == e.start){
                            Ql.offer(d);
                            sat.add(d);
                        }
                    }
                }
            }
        }
    }

    public static Queue<Edge> createPassQueue(ArrayList<Edge> sat){
        Queue<Edge> q = new LinkedList<>();
        for(Edge e: sat){
            q.offer(e);
        }
        return q;
    }

    public void removeSatEdges(){
        for(Edge e: sat){
            L.get(e.start).remove(e);
            LLength--;
        }
    }

    //Ignores the bottom edge in the stack since it was created not from the graph
    public int FlowChange(Stack<Edge> stk){
        sat = new ArrayList<>();
        int minCapacity = Integer.MAX_VALUE;
        //Must be >1 because the bottom edge isn't real
        while(stk.size() > 1){
            minCapacity = Math.min(minCapacity, stk.peek().capacity);
            sat.add(stk.pop());
        }

        for(int i = 0; i < sat.size(); i++){
            sat.get(i).capacity = sat.get(i).capacity - minCapacity;
            if(sat.get(i).capacity != 0){
                sat.remove(i);
                i--;
            }
        }
        return minCapacity;
    }

    // If every returns null, Then something's very wrong (with BFS)
    public Stack<Edge> PathFinding(int s, int t){

        Stack<Edge> stk = new Stack<>();
        stk.push(new Edge(-1,s,Integer.MAX_VALUE));
        while(!stk.empty()){
            Edge e = stk.peek();
            if(e.end == t){
                return stk;
            }
            else if(LLength <= 0){
                return null;
            }

            if(L.get(e.end).size() > 0){
                stk.push(L.get(e.end).get(0));
            }
            else{
                L.get(e.start).remove(stk.pop());
                LLength--;
            }
        }
        return null;
    }

    public void constructLayeredGraph(){
        L = new ArrayList<>();
        for(int i = 0; i < E.size(); i++){
            L.add(new ArrayList<>());
        }
        for(ArrayList<Edge> list: E){
            for(Edge e: list){
                if(V.get(e.start) < V.get(e.end) && e.capacity > 0){
                    L.get(e.start).add(e);
                }
            }
        }
    }

    private boolean bfs(int s, int t){
        Queue<Integer> nodes = new LinkedList<>();
        for(int i  = 0; i < V.size(); i++){
            V.set(i,-1);
        }
        V.set(s, 0);
        nodes.offer(s);

        while (nodes.size() > 0){
            int n = nodes.poll();
            if(n == t){
                return true;
            }
            for(Edge e: E.get(n)){
                if(V.get(e.end) < 0 && e.capacity > 0) {
                    V.set(e.end, V.get(e.start) + 1);
                    nodes.offer(e.end);
                }
            }
        }
        return false;
    }

    public static void addEdge(ArrayList<ArrayList<Edge>> E, Edge e){
        E.get(e.start).add(e);
    }

}

class Edge {
    public int start;
    public int end;
    public int capacity;

    public Edge(int start, int end, int capacity){
        this.start = start;
        this.end = end;
        this.capacity = capacity;
    }

    public String toString(){
        return "(" + start + ", " + end + ", " + capacity + ")";
    }
}
