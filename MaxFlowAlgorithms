import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.util.*;

public class MaxFlowAlgorithms {

    public static final int nanoScaling = 1000000;

    public static void main(String[] args) {

        /**
        ArrayList<Integer> V = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            V.add(0);
        }

        ArrayList<ArrayList<Edge>> E = new ArrayList<>();
        for (int i = 0; i < V.size(); i++) {
            E.add(new ArrayList<>());
        }

        //Dinic's wikipedia example
        DinicsFlowRate.addEdge(E, new Edge(1, 2, 10));
        DinicsFlowRate.addEdge(E, new Edge(1, 3, 10));
        DinicsFlowRate.addEdge(E, new Edge(2, 3, 2));
        DinicsFlowRate.addEdge(E, new Edge(2, 4, 4));
        DinicsFlowRate.addEdge(E, new Edge(2, 5, 8));
        DinicsFlowRate.addEdge(E, new Edge(3, 5, 9));
        DinicsFlowRate.addEdge(E, new Edge(5, 4, 6));
        DinicsFlowRate.addEdge(E, new Edge(4, 6, 10));
        DinicsFlowRate.addEdge(E, new Edge(5, 6, 10));

        DinicsFlowRate dmfr = new DinicsFlowRate(V,E);
        System.out.println(dmfr.maxFlowRate(1,6));


        V = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            V.add(0);
        }

        E = new ArrayList<>();
        for (int i = 0; i < V.size(); i++) {
            E.add(new ArrayList<>());
        }

        //EK's Wikipedia example
        DinicsFlowRate.addEdge(E, new Edge(1,2,3));
        DinicsFlowRate.addEdge(E, new Edge(2,3,4));
        DinicsFlowRate.addEdge(E, new Edge(1,4,3));
        DinicsFlowRate.addEdge(E, new Edge(3,1,3));
        DinicsFlowRate.addEdge(E, new Edge(3,4,1));
        DinicsFlowRate.addEdge(E, new Edge(3,5,2));
        DinicsFlowRate.addEdge(E, new Edge(4,5,2));
        DinicsFlowRate.addEdge(E, new Edge(4,6,6));
        DinicsFlowRate.addEdge(E, new Edge(5,2,1));
        DinicsFlowRate.addEdge(E, new Edge(5,7,1));
        DinicsFlowRate.addEdge(E, new Edge(6,7,9));

        DinicsFlowRate DEKmfr = new DinicsFlowRate(V,E);
        System.out.println(DEKmfr.maxFlowRate(1,7));


        System.out.println("Random: Dinics");
        int size = 10;
        E = generateE(size,4, 100);
        V = generateV(size);
        System.out.println(E.toString());
        System.out.println(runDinics(V,E,1, size));

         System.out.println();

         **/

        StringBuilder outStrDinic = new StringBuilder("Size\\Density, 20%, 33%, 50%\n");
        StringBuilder outStrEK = new StringBuilder("Size\\Density, 20%, 33%, 50%\n");

        int size = 40;
        for(int i = 0; i < 5; i++) {
            ArrayList<String> output = new ArrayList<>();
            size *= 2;
            outStrDinic.append(size);
            outStrEK.append(size);


            output.add(timeAlgorithms(size, (size / 5), 5));
            output.add(timeAlgorithms(size, (size / 3), 5));
            output.add(timeAlgorithms(size, (size / 2), 5));
            for(String s: output) {
                String[] sArr = s.split(":");
                outStrDinic.append(",").append(sArr[0]);
                outStrEK.append(",").append(sArr[1]);
            }
            outStrDinic.append("\n");
            outStrEK.append("\n");
        }

        try{
            PrintWriter DPW = new PrintWriter("DinicsData.csv");
            PrintWriter EKPW = new PrintWriter("EdmundsKarpData.csv");
            DPW.print(outStrDinic.toString());
            EKPW.print(outStrEK.toString());
            DPW.flush();
            DPW.close();
            EKPW.flush();
            EKPW.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

//        timeAlgorithms(10,2, 5);
//        timeAlgorithms(10,3,5);
//        timeAlgorithms(10,5,5);
//
//        timeAlgorithms(20,4, 5);
//        timeAlgorithms(20,6,5);
//        timeAlgorithms(20,10,5);
//
//        timeAlgorithms(40,8,5);
//        timeAlgorithms(40,12,5);
//        timeAlgorithms(40,20,5);
//
//        timeAlgorithms(80,16,5);
//        timeAlgorithms(80,24,5);
//        timeAlgorithms(80,40,5);
//
//        timeAlgorithms(160,32, 5);
//        timeAlgorithms(160,48,5);
//        timeAlgorithms(160,80,5);
//
//        timeAlgorithms(320,64, 5);
//        timeAlgorithms(320,96,5);
//        timeAlgorithms(320,160,5);
//
//        timeAlgorithms(640,128, 5);
//        timeAlgorithms(640,192,5);
//        timeAlgorithms(640,320,5);
//
//        timeAlgorithms(1280,256, 5);
//        timeAlgorithms(1280,384,5);
//        timeAlgorithms(1280,640,5);
    }

    public static String timeAlgorithms(int size, int density, int repetitions){

        float dt = 0;
        float ekt = 0;
        for(int i = 0; i < repetitions; i++){
            ArrayList<ArrayList<Edge>> E = generateE(size, density, 100);
            ArrayList<Integer> V = generateV(size);
//            Edges[] paths = generatePaths(E);
            dt += timeDinics(E,V,1,size);
//            ekt += timeEdmundsKarp(paths, 1, size, size);
            //TimeEK
        }
        System.out.println("Dinic's for Size: " + size + ", Density: " + density);
        System.out.println(dt/repetitions);
//        System.out.println("Edmonds-Karp for Size: " + size + ", Density: " + density);
//        System.out.println(ekt/repetitions);
        return (dt/repetitions) + ":" + ekt/repetitions;
    }

    public static float timeDinics(ArrayList<ArrayList<Edge>> E, ArrayList<Integer> V, int s, int t){

        float startTime = System.nanoTime();
        runDinics(V, E, s, t);
        float endTime = System.nanoTime();

        return (endTime - startTime) / nanoScaling;
    }

//    public static float timeEdmundsKarp(Edges[] paths, int s, int t, int vSize){
//
//        float startTime = System.nanoTime();
//        EKsort(paths, s, t, vSize);
//        float endTime = System.nanoTime();
//
//        return (endTime - startTime) / 1000000000;
//    }

    public static ArrayList<ArrayList<Edge>> generateE(int size, int connectivity, int maxCapacity){
        //Creating the adjacency list
        ArrayList<ArrayList<Edge>> E = new ArrayList<>();
        for(int i = 0; i <= size; i++){
            E.add(new ArrayList<>());
        }

        //Saturating the Graph
        for(int i = 1; i <= size; i++){
            int edgeCount = (int)(Math.random()*connectivity) + 1;
            for(int k = 0; k < edgeCount; k++){
                DinicsFlowRate.addEdge(E, new Edge(i,(int)(Math.random()*size)+1, (int)(Math.random()*maxCapacity)+1));
            }
        }

        E = cleanGraph(E);

        return E;
    }

//    public static Edges[] generatePaths(ArrayList<ArrayList<Edge>> E){
//        int numEdges = 0;
//        for(ArrayList<Edge> list: E){
//            numEdges += list.size();
//        }
//        Edges[] paths = new Edges[numEdges];
//
//        int i = 0;
//        for(ArrayList<Edge> list: E){
//            for(Edge e: list){
//                paths[i] = new Edges(e.start, e.end, e.capacity);
//            }
//        }
//        return paths;
//    }

    public static ArrayList<ArrayList<Edge>> cloneGraph(ArrayList<ArrayList<Edge>> E){
        ArrayList<ArrayList<Edge>> F = new ArrayList<>();
        for(int i = 0; i <= E.size(); i++){
            E.add(new ArrayList<>());
        }

        for(int i = 0; i <= E.size(); i++){
            for(Edge e: E.get(i)){
                F.get(i).add(new Edge(e.start, e.end, e.capacity));
            }
        }
        return F;
    }

    public static ArrayList<ArrayList<Edge>> cleanGraph(ArrayList<ArrayList<Edge>> E){
        for(ArrayList<Edge> list: E){
            for(int i = 0; i < list.size(); i++){
                Edge e = list.get(i);
                for(Edge d: E.get(e.end)){
                    if(d.end == e.start){
                        if(d.capacity == e.capacity){
                            E.get(d.start).remove(d);
                            E.get(e.start).remove(e);
                        }
                        else if(d.capacity > e.capacity){
                            d.capacity -= e.capacity;
                            E.get(e.start).remove(e);
                        }
                        else{
                            e.capacity -= d.capacity;
                            E.get(d.start).remove(d);
                        }
                        break;
                    }
                }
            }
        }
        return E;
    }

    public static ArrayList<Integer> generateV(int size){
        ArrayList<Integer> V = new ArrayList<>();
        for (int i = 0; i <= size; i++) {
            V.add(0);
        }
        return V;
    }




    public static String runDinics(ArrayList<Integer> V, ArrayList<ArrayList<Edge>> E, int s, int t){
        DinicsFlowRate dmfr = new DinicsFlowRate(V,E);
        return "Dinic's Max Flow Rate: " + dmfr.maxFlowRate(s,t);
    }
}
